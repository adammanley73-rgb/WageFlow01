-- 20250920190500_employees_fix_id_fk.sql
-- Make pay_run_employees -> employees reference the real PK (employees.id)
-- Then drop the stray employees.employee_id.

create extension if not exists pgcrypto;

-- 1) Ensure employees.id exists, is uuid, has default.
alter table public.employees
  add column if not exists id uuid;

-- If id is null but employee_id has a value, copy it across (best effort).
do $$
begin
  if exists (
    select 1 from information_schema.columns
    where table_schema='public' and table_name='employees' and column_name='employee_id'
  ) then
    -- attempt to copy values when possible
    update public.employees
      set id = coalesce(id, nullif(employee_id::text, '')::uuid)
    where id is null and employee_id is not null;
  end if;
end $$;

alter table public.employees
  alter column id set default gen_random_uuid();

-- 2) If there's a PK not on id, drop it, then set PK(id).
do $$
declare pk_name text;
declare pk_cols text[];
begin
  select c.conname,
         ARRAY(
           select a.attname
           from pg_attribute a
           where a.attrelid = c.conrelid and a.attnum = any(c.conkey)
         )
  into pk_name, pk_cols
  from pg_constraint c
  where c.conrelid = 'public.employees'::regclass
    and c.contype = 'p';

  if pk_name is not null and not ('id' = any(pk_cols)) then
    execute format('alter table public.employees drop constraint %I', pk_name);
  end if;
end $$;

-- Add PK(id) if missing.
do $$
begin
  if not exists (
    select 1 from pg_constraint
    where conrelid = 'public.employees'::regclass and contype = 'p'
  ) then
    alter table public.employees add primary key (id);
  end if;
end $$;

-- 3) Drop FK that targets employees.employee_id, then recreate to employees.id.
do $$
begin
  if exists (
    select 1 from pg_constraint
    where conname = 'pay_run_employees_employee_id_fkey'
  ) then
    alter table public.pay_run_employees
      drop constraint pay_run_employees_employee_id_fkey;
  end if;
end $$;

-- Make sure pay_run_employees.employee_id is uuid.
do $$
declare dt text;
begin
  select data_type into dt
  from information_schema.columns
  where table_schema='public' and table_name='pay_run_employees' and column_name='employee_id';

  if dt is not null and dt <> 'uuid' then
    alter table public.pay_run_employees
      alter column employee_id type uuid using nullif(employee_id::text,'')::uuid;
  end if;
end $$;

-- Recreate FK to the correct target.
alter table public.pay_run_employees
  add constraint pay_run_employees_employee_id_fkey
  foreign key (employee_id) references public.employees(id) on delete restrict;

-- 4) Finally, drop the stray employees.employee_id if it exists.
do $$
begin
  if exists (
    select 1 from information_schema.columns
    where table_schema='public' and table_name='employees' and column_name='employee_id'
  ) then
    alter table public.employees drop column employee_id;
  end if;
end $$;
