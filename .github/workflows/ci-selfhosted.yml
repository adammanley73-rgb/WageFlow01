name: ci-selfhosted

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ "**" ]

concurrency:
  group: ci-selfhosted-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-windows:
    name: Typecheck, Lint, Build on self-hosted Windows
    runs-on: [self-hosted, Windows, X64]
    env:
      NEXT_PUBLIC_APP_ENV: "ci"
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Allow PowerShell scripts
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Detect package manager
        id: pm
        shell: powershell
        run: |
          if (Test-Path "pnpm-lock.yaml") { "pm=pnpm" | Out-File -FilePath $env:GITHUB_OUTPUT -Append }
          elseif (Test-Path "yarn.lock")  { "pm=yarn" | Out-File -FilePath $env:GITHUB_OUTPUT -Append }
          else                            { "pm=npm"  | Out-File -FilePath $env:GITHUB_OUTPUT -Append }

      - name: Setup pnpm if needed
        if: steps.pm.outputs.pm == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Enable corepack for yarn if needed
        if: steps.pm.outputs.pm == 'yarn'
        shell: powershell
        run: corepack enable

      - name: Install dependencies
        shell: powershell
        run: |
          $pm = "${{ steps.pm.outputs.pm }}"
          if ($pm -eq "pnpm") {
            pnpm install --frozen-lockfile -r
            if ($LASTEXITCODE -ne 0) { pnpm install -r }
          }
          elseif ($pm -eq "yarn") {
            yarn install --frozen-lockfile
            if ($LASTEXITCODE -ne 0) { yarn install }
          }
          else {
            if (Test-Path "package-lock.json") { npm ci }
            else { npm install }
          }

      - name: Typecheck
        shell: powershell
        run: |
          $pm = "${{ steps.pm.outputs.pm }}"
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          if ($pkg.scripts.PSObject.Properties.Name -contains "typecheck") {
            if ($pm -eq "pnpm") { pnpm run typecheck }
            elseif ($pm -eq "yarn") { yarn run typecheck }
            else { npm run typecheck }
          }
          elseif (Get-Command tsc -ErrorAction SilentlyContinue) {
            tsc --noEmit
          }
          else {
            Write-Host "No typecheck configured, skipping"
          }

      - name: Lint (skip if no ESLint config)
        shell: powershell
        run: |
          $pm = "${{ steps.pm.outputs.pm }}"
          $hasConfig = (Test-Path ".eslintrc" -PathType Leaf) -or
                       (Test-Path ".eslintrc.json") -or
                       (Test-Path ".eslintrc.js") -or
                       (Test-Path ".eslintrc.cjs") -or
                       (Test-Path ".eslintrc.yaml") -or
                       (Test-Path ".eslintrc.yml")
          if (-not $hasConfig) {
            try {
              $pkg = Get-Content package.json -Raw | ConvertFrom-Json
              if ($pkg.PSObject.Properties.Name -contains "eslintConfig") { $hasConfig = $true }
            } catch { }
          }
          if ($hasConfig) {
            if ($pm -eq "pnpm") { pnpm run lint }
            elseif ($pm -eq "yarn") { yarn run lint }
            else { npm run lint }
          } else {
            Write-Host "No ESLint config detected, skipping lint."
          }

      - name: Build
        shell: powershell
        run: |
          $pm = "${{ steps.pm.outputs.pm }}"
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          if ($pkg.scripts.PSObject.Properties.Name -contains "build") {
            if ($pm -eq "pnpm") { pnpm run build }
            elseif ($pm -eq "yarn") { yarn run build }
            else { npm run build }
          }
          else {
            Write-Host "No build script, skipping"
          }

      - name: Unit tests
        shell: powershell
        run: |
          $pm = "${{ steps.pm.outputs.pm }}"
          $pkg = Get-Content package.json -Raw | ConvertFrom-Json
          if ($pkg.scripts.PSObject.Properties.Name -contains "test") {
            if ($pm -eq "pnpm") { pnpm run test -- --ci --reporter=default }
            elseif ($pm -eq "yarn") { yarn run test --ci }
            else { npm test -- --ci }
          }
          else {
            Write-Host "No tests yet, skipping"
          }
